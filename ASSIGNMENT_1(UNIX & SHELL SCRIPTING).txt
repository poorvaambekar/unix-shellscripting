POORVA AMBEKAR 
ASSIGNMENT 01

1) List the contents of a directory and their attributes
= ls command

2)Long list the content with file, directory ownership, permissions,sizes, etc…
= ls -l command

3)Display the size of the file in human readable format
= ls -lh command

4)Show all files and folders including hidden one
= ls -a

5)list directories recursively
=ls -R

6)Sort the files by size with largest at the top
= ls -S

7)Sort the files by last time modified displaying the newest first.
= ls -t

8)Display the location of a program/command, where it is installed.
= which [-a][-p path] command  (inux)

9)Which command is used to switch directory from one to another
= cd DirectoryName

10)List all the environment variables set for the current shell environment
= SHELL(path of current user's shell), USER, HOME,PATH, LOGNAME, LANG, TERM, MAIL, EDITOR

11)Did you notice something in the output of "env" command?
=Yes (listed all of the current environment variables)

12)Which command is used to print the text or any variables value in the Console/Terminal?
= echo " Text Message " command

13)Print the value of the env variable "PATH" on the console
= printenv PATH

14) Is linux a case-sensitive operating system?
= Yes

15) Is, "Ls" same as "ls"?
= No.(ls- list all the files and directories, Ls -list all the files and directories with attribute/parameters )

16) Display your currently logged in user
= echo $USER
=logname

17) how do you change the currrently logged in user to another user?
= sudo su (then it will ask for password)

18)which command is used to leave a shell environment that you are currently logged in to?
=  exit

19)How do you reboot the system?
= sudo reboot

20)How do you shutdown the system?
= shutdown

21)Display all the major running processes in the system
= top

22)Understand the output of command used in above question of displaying processes, explain the meaning of each column and what data it displays?
= PID (Process ID)
User (User name of the task owner  )
PR (Priority)
NI (Nice Value of the task)
VIRT (Virtual Memory Used)
RES (Physical Memory Used)
SHR (Share Memory Used)
S (Status of the task)
%CPU (% of CPU Time)
%MEM (% of Physical Memory Used )
TIME+ (Total CPU Time)
COMMAND (Command name)


23)Display the name of the system kernel
= uname (Linux)

24)display the kernel release number
= uname -r

25)display teh machine type of the current kernel
= uname -m

26) Display the name of the operating system that the kernel is running on
= GNU/Linux

27)Display all info that uname command can show.
= uname 
-s, (--kernel-name) - Prints the kernel name.

uname -n, (--nodename) - Prints the system’s node name (hostname). This is the name the system uses when communicating over the network. When used with the -n option, uname produces the same output as the hostname command.

uname -r, (--kernel-release) - Prints the kernel release.

uname -v, (--kernel-version) - Prints the kernel version.

uname -m, (--machine) - Prints the name of the machine’s hardware name.

uname -p, (--processor) - Prints the architecture of the processor.

uname -i, (--hardware-platform) - Prints the hardware platform.

uname -o, (--operating-system) - Print the name of the operating system. On Linux systems that is “GNU/Linux”
-a, (--all) - When the -a option is used, uname behaves the same as if the -snrvmo options have been given.

28)Display the name of directory that you are currently pointing to
= pwd

29)change the current directory to another directory that you have in your system.
= cd DirectoryName

30)Go up one directory
= cd ..

31)Return to last directory
= cd /

32)change the current directory to home(logged in user's) directory 
=cd /home

33)How to check all the command used from the prompt (Command History)
= history

34) In which file the history of commands are stored in?
= 1 ) In .bash_history file . 
   2 ) echo  $HISTFILE

35)How many lines of history does the system keep and from where you can change it?
=  1000 lines of history is stored by default.
         ~We can Change it by using $HISTSIZE and$HISTFILESIZE command
36)How can you modify bash's history behaviour
= prompt_command 

37)Display all the commands entered so far, now, try to run a particular command from the history list without typing that command.
=  !232 (!Command number shown in history)

NOTE:- TAB key is your friend when it comes to command completion and having long file and directory names autocompleted at the bash prompt for you. JUST BE LAZY AND USE TAB KEY FOR AUTO COMPLETION ;-)

38)What are the different types of shell and where are they used and how do we use them?
=1) The Bourne Shell (sh): It is a original UNIX shell which is use for Scripting. If we use Bourne-type shell, the $ character is the default prompt.
The Bourne Shell has Subcategories-
a)Bourne Shell(sh) 
b)Korn Shell(ksh)    
c)Bourne Again Shell(bash) 
d) Z Shell(zsh) 

2) C shell- If we use a C-type shell, the % character is the default prompt.
Different type of C shell are
C shell(csh)
TENEX/TOPS C shell

39)What is the difference between login shell and non-login shell?
= 1) LOGIN SHELL :
           A Login shell is started after a successful login, using /bin/login, by reading the /etc/passwd file.
          Login shell is the first process that executes under our user ID when we log in to a session.
        The login process tells the shell to behave as a login shell with a convention: passing argument 0, which is normally the name of the shell executable, with a “-” character prepended.

2)NON-LOGIN SHELL :
                      A Non login shell is started by a program without a login.
                      In this case, the program just passes the name of the shell executable.
 


40) How do we start login shell and non-login shell?
= 1) Login Shell:
     1.Press the menu button in the top-right corner of the window and select Preferences.

    2.In the sidebar, select your current profile in the Profiles section.

    3.Select Command.

    4.Under the Command label, select Run command as a login shell.

2)Non Login Shell :
           If the output is the name of our shell, prepended by a dash, then it is a login shell. 
           For example -bash, -su etc. A Non login shell is started by a program without a login. 
             In this case, the program just passes the name of the shell executable.


41)What happens when you start a login shell (which files are read and used and Why)?
=     When Bash is invoked as an interactive login shell, or as a non-interactive shell with the --login option, 
      it first reads and executes commands from the file /etc/profile, if that file exists. 
     After reading that file, it looks for ~/.bash_profile, ~/.bash_login, and ~/.profile, in that order, and reads and 
     executes commands from the first one that exists and is readable. 
     The --noprofile option may be used when the shell is started to inhibit this behavior.
      When an interactive login shell exits, or a non-interactive login shell executes the exit builtin command,
      Bash reads and executes commands from the file ~/.bash_logout, if it exists. 

42)What happens when you start a non-login shell (Which files are read and used and Why)?
=       When an interactive shell that is not a login shell is started, Bash reads and executes commands from ~/.bashrc, if that file exists. 
        This may be inhibited by using the --norc option. 
        The --rcfile file option will force Bash to read and execute commands from file instead of ~/.bashrc.
        So, typically, your ~/.bash_profile contains the line
         if [ -f ~/.bashrc ]; then . ~/.bashrc; fi after (or before) any login-specific initializations. 


43)What are Shell Configuration Files, why do we need it?
=      Shell configuration files are executed automatically when you log in and. out of a shell.
        They initialize and configure a shell upon login and. perform cleanup operations upon logout.

44)Explain the Order of file usage from the system/user's home directory when user logs in to the System.
=      Documents--These include text files, such as letters or reports, computer source code, or anything else that you write and want to save.
       Commands--Most commands are executable files; that is, they are files you can execute to run a particular program. 
                                For example, the date command that you saw in the previous chapter, which executes a program that provides the current date, 
                                 is an executable file.
       Devices--Your terminal, printer, and disk drive(s) are all treated as files.
       Directories--A directory is simply a file that contains other files.

45)What are Shell Variables, list major shell variables and what do they represent?
= A shell variable is a variable that is available only to the current shell
        
 1 >> Local Variables - A local variable is a variable that is present within the current instance of the shell.
 It is not available to programs that are started by the shell. They are set at the command prompt.

 2 >> Environment Variables - An environment variable is available to any child process of the shell. 
Some programs need environment variables in order to function correctly. Usually, 
 a shell script defines only those environment variables that are needed by the programs that it runs.

3 >> Shell Variables - A shell variable is a special variable that is set by the shell and is required by the shell in order to function correctly.
 Some of these variables are environment variables whereas others are local variables.
 

46)How we see all our env variables?
=       The printenv command list the values of the specified environment VARIABLE(s).

47)How we see all env variables in alphabical order?
=     To see a complete list of environment variables, use this command from any location: get-childitem env:* 
     The sort-object cmdlet in the second step of the pipeline sorts the objects passed to it by the first step of the pipeline in 
     ascending alphabetical order by the value of the Key property.


48)What Format does the env var and its values are stored?
=      An Environment variable is stored in name /value pair.

49)How do you create your own varible?
= read VariableName

50)How do you start a new bash shell?
=     bash -c 'gnome-terminal -x cd /absolute-path && program_name'

51)Difference between Local/Shell variables to Global Variable
=     Local variable is declared inside a function whereas Global variable is declared outside the function. 
      Local variables are stored on the stack whereas the Global variable are stored on a fixed location decided by the compiler

52)Making a variable accessible from other the shell in the system.
53)Show the real life use case of exporting a variable
=     export [-f] [-n] [name[=value] ...] or export -p

54) Convert the above script file into a command, The file should run with "myappp" instead of "myapp.sh"
55) What is Globbing? Explain in depth with examples?
=  The Bash shell feature that is used for matching or expanding specific types of patterns is called globbing. 
    Globbing is mainly used to match filenames or searching for content in a file. Globbing uses wildcard characters to create the pattern.

56) List all entries with extension ".sh"
= find . -type f  -name "*.sh"

57) List all entries with numbers in it.
= ls | grep -E '^[0-9]+$'

58) List all entries that starts with a character and ends with a number
 59)List all entries that name length more than 5 characters
 = find /tmp -type f -print| awk -F/ ' length($NF)  > 5 '

60)What is Quoting? and Why do we need it?
=   Quoting is an important technique used to include information from outside sources in academic writing. 
     When using quotations, it is important that you also cite the original reference that you have taken the quotation from, 
     as your citations provide your reader with a map of the research that you have done.

61)Write few(minimum 3) unique examples that shows, how a particular problem is solved using Quoting.

62)How do you find a particular files/directories based on a particular search criteria?
    =    find . -name "pattern" -print.

HINT:- look for commands -> locate, find and whereis

63)Write major difference between locate, find and whereis?
= find : is what you use when you want to search by particular criteria and also manipulate files. 
                It is slow because it performs the requested test(s) on every file to see if it matches.
  locate :    is used to scan the whole system quickly for something 
                   you might use this when you have no idea where something is.
  whereis :  command simply returns the location of the executables, the man pages and the sources of a program

64)How Globbing is different from locate, find and whereis?
=     Big difference is that find searches real files recursively down a given directory, 
      while locate searches a database without requiring specific directory. 
      Thus, if you have saved a file before updating database, find will find it , but locate won't.
    As for whereis and which, they search only inside those directories that are mentioned in your PATH variable 
      and only those with executable permission set


65)Explain the Linux File System.
=  Linux File System or any file system generally is a layer that is under the operating system that handles the positioning of your
  data on the storage; without it, the system cannot knows which file starts from where and ends where.

66)Explain absolute and Relative Paths
= 1)  ABSOLUTE PATH is defined as  a complete path from start of actual file system from / directory.
  
 2 ) RELATIVE PATH Relative path is defined as the path related to the present working directly(pwd).
 It starts at your current directory and never starts with a / .

67)What are the different ways of creating a File in linux System? Write an example of each and the difference between them.
=
  1 touch filename 
  2 > filename
 3 cat > filename
 4 echo ‘Random sample text’ > filename
    

68)In how many ways we can delete the files from linux system? write an example of each and teh difference between them.
= 1 rm {file-name} > remove single file .
   2 rm -i {file-name} > To make rm always prompt before deleting a file, use -i
   3 rm -f {file-name} > To remove write-protected files without prompting for confirmation, use -f flag.
   4 rm file-name-*  > If you want to delete all files named file-name-*,
    5 unlink filename > To delete a single file, use the rm or unlink command .

69)Archiving files using linux command, write a command to archive set of files from linux commands.
= tar cvf archieve.tar(name to the archive  file) Filename(Name of file to be Archive)/

70)Extract the archived files from the above step.
= tar xvf FileName(Name of the file to be archive)
 